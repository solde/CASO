sudo ./check-disk.sh ext2  ** using ext2 filesystem *******
** Module myblkdrv is correctly loaded *******
** creating ext2 filesystem *******
mke2fs 1.45.5 (07-Jan-2020)
/dev/xrd1 contains a ext2 file system
        created on Tue May 19 18:31:34 2020
Proceed anyway? (y,N) y
Creating filesystem with 4096 4k blocks and 4096 inodes

Allocating group tables: done                            
Writing inode tables: done                            
Writing superblocks and filesystem accounting information: done

** checking ext2 filesystem *******
fsck from util-linux 2.34
e2fsck 1.45.5 (07-Jan-2020)
/dev/xrd1: clean, 11/4096 files, 138/4096 blocks
** mounting device *******
** copying files *******
** verifying files *******
  ** comparing built-in.a *******
  ** comparing check-disk.sh *******
  ** comparing check-partition.sh *******
  ** comparing ext2.out *******
  ** comparing implementation.c *******
  ** comparing interface.c *******
  ** comparing interface.h *******
  ** comparing Makefile *******
  ** comparing myblkdrv.mod *******
** unmounting device *******
Test   SUCCESSFUL!!

 sudo ./check-disk.sh ext3 
** using ext3 filesystem *******
** Module myblkdrv is correctly loaded *******
** creating ext3 filesystem *******
mke2fs 1.45.5 (07-Jan-2020)
/dev/xrd1 contains a ext2 file system
        last mounted on /mnt/point on Tue May 19 18:31:53 2020
Proceed anyway? (y,N) y
Creating filesystem with 4096 4k blocks and 4096 inodes

Allocating group tables: done                            
Writing inode tables: done                            
Creating journal (1024 blocks): done
Writing superblocks and filesystem accounting information: done

** checking ext3 filesystem *******
fsck from util-linux 2.34
e2fsck 1.45.5 (07-Jan-2020)
/dev/xrd1: clean, 11/4096 files, 1163/4096 blocks
** mounting device *******
** copying files *******
** verifying files *******
  ** comparing built-in.a *******
  ** comparing check-disk.sh *******
  ** comparing check-partition.sh *******
  ** comparing implementation.c *******
  ** comparing interface.c *******
  ** comparing interface.h *******
  ** comparing Makefile *******
  ** comparing myblkdrv.mod *******
** unmounting device *******
Test   SUCCESSFUL!!

sudo ./check-disk.sh ext4
** using ext4 filesystem *******
** Module myblkdrv is correctly loaded *******
** creating ext4 filesystem *******
mke2fs 1.45.5 (07-Jan-2020)
/dev/xrd1 contains a ext3 file system
        last mounted on /mnt/point on Tue May 19 18:32:18 2020
Proceed anyway? (y,N) y
Creating filesystem with 4096 4k blocks and 4096 inodes

Allocating group tables: done                            
Writing inode tables: done                            
Creating journal (1024 blocks): done
Writing superblocks and filesystem accounting information: done

** checking ext4 filesystem *******
fsck from util-linux 2.34
e2fsck 1.45.5 (07-Jan-2020)
/dev/xrd1: clean, 11/4096 files, 1163/4096 blocks
** mounting device *******
** copying files *******
** verifying files *******
  ** comparing built-in.a *******
  ** comparing check-disk.sh *******
  ** comparing check-partition.sh *******
  ** comparing implementation.c *******
  ** comparing interface.c *******
  ** comparing interface.h *******
  ** comparing Makefile *******
  ** comparing myblkdrv.mod *******
** unmounting device *******
Test   SUCCESSFUL!!

sudo ./check-disk.sh reiser4
** using reiser4 filesystem *******
** Module myblkdrv is correctly loaded *******
** creating reiser4 filesystem *******
mkfs.reiser4 1.2.1
Format release: 4.0.2
Copyright (C) 2001-2005 by Hans Reiser, licensing governed by reiser4progs/COPYING. 

Block size 4096 will be used.                                                                  
Linux 5.4.0-29-generic is detected.                                                            
Uuid 96a0fab2-9917-462f-b983-052e59b436e6 will be used.                                        
Reiser4 is going to be created on /dev/xrd1.                                                   
(Yes/No): Yes
Creating reiser4 on /dev/xrd1 ... done                                                         
** checking reiser4 filesystem *******
fsck from util-linux 2.34
*******************************************************************
This is an EXPERIMENTAL version of fsck.reiser4. Read README first.
*******************************************************************

Fscking the /dev/xrd1 block device.                                                            
Will check the consistency of the Reiser4 SuperBlock.                                          
Will check the consistency of the Reiser4 FileSystem.                                          
Continue?                                                                                      
(Yes/No): Yes
***** fsck.reiser4 started at Tue May 19 18:21:37 2020
Reiser4 fs was detected on /dev/xrd1.                                                          
Master super block (16): 
magic:          ReIsEr4 
blksize:        4096 
format:         0x0 (format40) 
uuid:           96a0fab2-9917-462f-b983-052e59b436e6 
label:          <none> 
 
Format super block (17): 
plugin:         format40 
description:    Disk-format plugin. 
version:        2 
magic:          ReIsEr40FoRmAt 
mkfs id:        0x64874fbb 
flushes:        0 
blocks:         512 
free blocks:    487 
root block:     23 
tail policy:    0x2 (smart) 
next oid:       0x10001 
file count:     2 
tree height:    2 
key policy:     LARGE 
 
 
CHECKING THE STORAGE TREE                                                                      
        Read nodes 2                                                                           
        Nodes left in the tree 2 
                Leaves of them 1, Twigs of them 1 
        Time interval: Tue May 19 18:21:37 2020 - Tue May 19 18:21:37 2020 
CHECKING EXTENT REGIONS.                                                                       
        Read twigs 1                                                                           
        Time interval: Tue May 19 18:21:37 2020 - Tue May 19 18:21:37 2020 
CHECKING THE SEMANTIC TREE                                                                     
        Found 2 objects (some could be encountered more then once).                            
        Time interval: Tue May 19 18:21:37 2020 - Tue May 19 18:21:37 2020 
***** fsck.reiser4 finished at Tue May 19 18:21:37 2020
Closing fs...done

FS is consistent.

** mounting device *******
mount: /mnt/point: unknown filesystem type 'reiser4'.
Test UNSUCCESSFUL!!!!!

sudo ./check-disk.sh reiserfs
** using reiserfs filesystem *******
** Module myblkdrv is correctly loaded *******
** creating reiserfs filesystem *******
mkfs.reiserfs 3.6.27

Guessing about desired format.. Kernel 5.4.0-29-generic is running.
Format 3.6 with non-standard journal
Count of blocks on the device: 4096
Number of blocks consumed by mkreiserfs formatting process: 2067
Blocksize: 4096
Hash function used to sort names: "r5"
Journal Size 2048 blocks (first block 18)
Journal Max transaction length 1023
inode generation number: 0
UUID: 79cc04f9-51e9-48ce-9758-645b32ad55fa
ATTENTION: YOU SHOULD REBOOT AFTER FDISK!
        ALL DATA WILL BE LOST ON '/dev/xrd1'!
Continue (y/n):y
Initializing journal - 0%....20%....40%....60%....80%....100%
Syncing..ok
ReiserFS is successfully created on /dev/xrd1.
** checking reiserfs filesystem *******
fsck from util-linux 2.34
reiserfsck 3.6.27

Will read-only check consistency of the filesystem on /dev/xrd1
Will put log info to 'stdout'

Do you want to run this program?[N/Yes] (note need to type Yes if you do):Yes
###########
reiserfsck --check started at Tue May 19 18:20:35 2020
###########
Replaying journal: No transactions found
Checking internal tree.. finished
Comparing bitmaps..finished
Checking Semantic tree:
finished
No corruptions found
There are on the filesystem:
        Leaves 1
        Internal nodes 0
        Directories 1
        Other files 0
        Data block pointers 0 (0 of them are zero)
        Safe links 0
###########
reiserfsck finished at Tue May 19 18:20:35 2020
###########
** mounting device *******
** copying files *******
** verifying files *******
  ** comparing badblocks.output *******
  ** comparing built-in.a *******
  ** comparing check-disk.sh *******
  ** comparing check-partition.sh *******
  ** comparing implementation.c *******
  ** comparing implementation.o *******
  ** comparing interface.c *******
  ** comparing interface.h *******
  ** comparing interface.o *******
  ** comparing lsmod.output *******
  ** comparing Makefile *******
  ** comparing modules.order *******
  ** comparing Module.symvers *******
  ** comparing myblkdrv.ko *******
  ** comparing myblkdrv.mod *******
  ** comparing myblkdrv.mod.c *******
  ** comparing myblkdrv.mod.o *******
  ** comparing myblkdrv.o *******
** unmounting device *******
Test   SUCCESSFUL!!

sudo ./check-disk.sh vfat
** using vfat filesystem *******
** Module myblkdrv is correctly loaded *******
** creating vfat filesystem *******
mkfs.fat 4.1 (2017-01-24)
** checking vfat filesystem *******
fsck from util-linux 2.34
fsck.fat 4.1 (2017-01-24)
/dev/xrd1: 0 files, 0/8167 clusters
** mounting device *******
** copying files *******
tar: ./check-partition.sh: Cannot change ownership to uid 1000, gid 1000: Operation not permitted
tar: ./check-disk.sh: Cannot change ownership to uid 1000, gid 1000: Operation not permitted
tar: ./built-in.a: Cannot change ownership to uid 1000, gid 1000: Operation not permitted
tar: ./interface.h: Cannot change ownership to uid 1000, gid 1000: Operation not permitted
tar: ./.built-in.a.cmd: Cannot change ownership to uid 1000, gid 1000: Operation not permitted
tar: ./implementation.c: Cannot change ownership to uid 1000, gid 1000: Operation not permitted
tar: ./.myblkdrv.mod.cmd: Cannot change ownership to uid 1000, gid 1000: Operation not permitted
tar: ./Makefile: Cannot change ownership to uid 1000, gid 1000: Operation not permitted
tar: ./myblkdrv.mod: Cannot change ownership to uid 1000, gid 1000: Operation not permitted
tar: ./interface.c: Cannot change ownership to uid 1000, gid 1000: Operation not permitted
tar: .: Cannot change ownership to uid 1000, gid 1000: Operation not permitted
tar: Exiting with failure status due to previous errors
** verifying files *******
  ** comparing built-in.a *******
  ** comparing check-disk.sh *******
  ** comparing check-partition.sh *******
  ** comparing implementation.c *******
  ** comparing interface.c *******
  ** comparing interface.h *******
  ** comparing Makefile *******
  ** comparing myblkdrv.mod *******
** unmounting device *******
Test   SUCCESSFUL!!